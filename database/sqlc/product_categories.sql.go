// Code generated by sqlc. DO NOT EDIT.
// source: product_categories.sql

package database

import (
	"context"
	"database/sql"
)

const createProductCategory = `-- name: CreateProductCategory :execresult
INSERT INTO product_categories 
    (name, description, slug, is_publish) 
    VALUES (?, ?, ?, ?)
`

type CreateProductCategoryParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Slug        string         `json:"slug"`
	IsPublish   bool           `json:"is_publish"`
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProductCategory,
		arg.Name,
		arg.Description,
		arg.Slug,
		arg.IsPublish,
	)
}

const deleteProductCategory = `-- name: DeleteProductCategory :exec
DELETE FROM product_categories WHERE id = ?
`

func (q *Queries) DeleteProductCategory(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProductCategory, id)
	return err
}

const getProductCategory = `-- name: GetProductCategory :one
SELECT id, name, slug, description, is_publish, created_at, updated_at FROM product_categories WHERE id = ? LIMIT 1
`

func (q *Queries) GetProductCategory(ctx context.Context, id int32) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategory, id)
	var i ProductCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.IsPublish,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProductCategories = `-- name: ListProductCategories :many
SELECT id, name, slug, description, is_publish, created_at, updated_at FROM product_categories ORDER BY created_at
`

func (q *Queries) ListProductCategories(ctx context.Context) ([]ProductCategory, error) {
	rows, err := q.db.QueryContext(ctx, listProductCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductCategory
	for rows.Next() {
		var i ProductCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.IsPublish,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductCategory = `-- name: UpdateProductCategory :exec
UPDATE product_categories 
    SET name = ?, description = ?, slug = ?, is_publish = ?, updated_at = now() 
    WHERE id = ?
`

type UpdateProductCategoryParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Slug        string         `json:"slug"`
	IsPublish   bool           `json:"is_publish"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateProductCategory(ctx context.Context, arg UpdateProductCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateProductCategory,
		arg.Name,
		arg.Description,
		arg.Slug,
		arg.IsPublish,
		arg.ID,
	)
	return err
}
